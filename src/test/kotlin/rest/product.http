### Create new product
POST localhost:8080/product
Content-Type: application/json

{
"name": "Cottage cheese",
"price": 14.99,
"quantity": 4
}

> {%
    client.test("Request successfully created new product", () => {
        client.assert(response.status === 201, "Response status is not 201");
    });

    const productId = response.body.id

    client.test("Response should contain ID of created product", () => client
        .assert(productId != null, "Product ID is missing in response")
    )
    client.global.set("productId", productId)
%}

### Get product by ID
PUT localhost:8080/product/{{productId}}
Content-Type: application/json

{
  "name": "Cottage cheese with protein",
  "price": 19.99,
  "quantity": 4
}

> {%
    client.test("Request executed successfully", () => {
        client.assert(response.status === 200, "Response status is not 200");
    });

    const product = response.body

    client.test("Response should contain ID of created product", () => {
            client.assert(product.name === "Cottage cheese with protein", "Product Name is not updated")
            client.assert(product.price === 19.99, "Product Price is not updated")
        }
    )
%}

### Get product by ID
GET localhost:8080/product/{{productId}}
Content-Type: application/json

> {%
    client.test("Request executed successfully", () => {
        client.assert(response.status === 200, "Response status is not 200");
    });

    const productId = response.body.id

    client.test("Response should contain ID of created product", () => client
        .assert(productId != null, "Product ID is missing in response")
    )
    client.global.set("productId", productId)
%}

### Delete product by ID
DELETE localhost:8080/product/{{productId}}
Content-Type: application/json

> {%
    client.test("Request executed successfully", () => {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Get deleted product by ID
GET localhost:8080/product/{{productId}}
Content-Type: application/json

> {%
    client.test("Request for deleted product returns 404", () => {
        client.assert(response.status === 404, "Response status is not 404");
    });
%}
